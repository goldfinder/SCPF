-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 5252 characters
local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AADVIQVNb2RlbCEKV29ybGRQaXZvdATMzc4Ez9DOIQRQYXJ0IQhBbmNob3JlZCIhDUJvdHRvbVN1cmZhY2UDAAAAAAAAAAAhCkJyaWNrQ29sb3IHxwAhBkNGcmFtZQQV0M4hBUNvbG9yBmNfYiEITWF0ZXJpYWwDAAAAAACAiUAhC09yaWVudGF0aW9uCgAAAAAAALRC'
..'AAAAACEIUG9zaXRpb24K3zuGRaRcbEGoUI7AIQhSb3RhdGlvbiEEU2l6ZQq5HtVA5XqkQAAAAEAhClRvcFN1cmZhY2UHAAQEHtDOBqHm/wMAAAAAAICYQAqYNoZFkK4wQbAnksAKXI+yQGZmjkEI1yM/IQxUcmFuc3BhcmVuY3kDAAAAwMzM5D8hCkF0dGFjaG1lbnQE'
..'JM3OCgAAAADAHgU/AABXvyEJU3BvdExpZ2h0BqpVAAQozc4KAAAAAPQo3MAAAFe/BCrNzgoAAAAA4HrkQAAAV78ELNDOCt87hkV7iptBsCeSwAq5HtVAleuRPwAAAEAEL9DOCt87hkUC2P1AsCeSwAQy0c4KAAAAAAAAtMIAAAAACuE7hkWEmy1A+GWMwCEJV2VkZ2VQ'
..'YXJ0BDfO0gZmYmUKAAAAAAAAAAAAALRCCrY3hkUUmjJB2FsGwQpI4Y5BAACAPwAAgD8EOtDOCt87hkU0HzBBsAvlwAqocL0/C9eNQQAAAEAEPs7RCgAAAAAAALRCAAC0Qgq3N4ZFKUg0QYC9Dr8KAAC0QgAAtEIAAAAACjMzjUEAAIA/AACAPwRC0M4K3zuGRTQfMEHA'
..'PuK/B2oABEfQzgbahUEDAAAAAAAAckAKbzyGRZCuMEGwJ5LACrke1UBoZo5BehTuPwTT0M4ES9DOCt87hkWkXGxBhiP2wQRN0M4KmDaGRZCuMEFIGffBBE/QzgrfO4ZFe4qbQUgZ98EEUdDOCt87hkUC2P1ASBn3wQRT0c4K4TuGRYSbLUDaqPXBBFXO0gq2N4ZFFJoy'
..'QaTeCsIEV9DOCt87hkU0HzBBJOkFwgRZztEKtzeGRSlINEFIBdfBBFvQzgrfO4ZFNB8wQUiz4MEEXdDOCm88hkWQrjBBSBn3wQRf0M4KHECGRZCuMEE3HHbCBGHO0QpkO4ZFKUg0QcgRZsIEY9DOCow/hkWkXGxBNxx2wgRl0M4KjD+GRTQfMEEB6WrCBGfQzgqMP4ZF'
..'e4qbQTccdsIEadDOCow/hkU0HzBBLzyAwgRr0M4KRTqGRZCuMEE3HHbCBG3QzgqMP4ZFAtj9QDccdsIEb9DOCow/hkWFmy1ANxx2wgRxztIKYzuGRRSaMkHitoLCBHTO0AoAAAAAAAC0wgAAtEIKHPqERSlINEEAt4LCCgAAtMIAALTCAAAAAAR30c4K9PWERTQfMEGA'
..'S4DCBHnQzgry9YRFhZstQDccdsIEe9HOCjv7hEWQrjBBAGR1wgR90c4K9PWERTQfMEGAB2vCBH/Rzgr09YRFAtj9QABkdcIEgdHOCvT1hEWkXGxBAGR1wgSD0c4K9PWERXuKm0EAZHXCBIbOzQoAAAAAAAA0QwAAtEIKHfqERRSaMkEAEmbCCgAANMMAAAAAAAC0wgSJ'
..'0c4KZPWERZCuMEEAZHXCBNTRzgSM0c4K9PWERaRcbEEKn/bBBI7Rzgo7+4RFkK4wQUip9cEEkNHOCvT1hEV7iptBSKn1wQSS0c4K9PWERQLY/UBIqfXBBJTQzgry9YRFhJstQLYZ98EEls7NCh36hEUUmjJBSAXXwQSY0c4K9PWERTQfMEFI8ODBBJrO0Aoc+oRFKUg0'
..'QaTeCsIEnNHOCvT1hEU0HzBBpAcGwgSe0c4KZPWERZCuMEFIqfXBBNXRzgSh0c4K9PWERaRcbEG4PpDABKPRzgo7+4RFkK4wQbBnjMAEpdHOCvT1hEV7iptBsGeMwASn0c4K9PWERQLY/UCwZ4zABKnQzgry9YRFhJstQGgpksAEq87NCh36hEUUmjJBgL0OvwSt0c4K'
..'9PWERTQfMEHADua/BK/O0Aoc+oRFKUg0QdhbBsEEsdHOCvT1hEU0HzBBsP/lwASz0c4KZPWERZCuMEGwZ4zABLXNzgq98oRFzHsmQYp2GMIKIIWLP3sUmkFQ6p9CBLjNzgqKloVFN/afQYp2GMIK9igoQgAAAD9Q6p9CBLvNzgqKloVF2DYbQIp2GMIEvc3OCmE/hkXM'
..'eyZBinYYwgTA0dIKAAC0QgAAtMIAAAAACso3hkX+HyFAAMoqwgoAALRCAAAAAAAAtEIKHgWPQgAAgD/1KFw/BMTQzQow+oRF/h8hQADKKsIKAAC0QgAAAAAAALTCB/EDBMrN0Qb//wAKAAC0QgAAAAAAAAAAClmWhUX+HyFA7+Sawgo8CihCAACAP/YoXD8Kv5qFReAp'
..'KEGsLRnCCgAAgD8AAAAAAAAAAAoAAAAAAACAPwAAAAAKyzuGRcLhMUGwR4/ACgAAAAAAAAAAAACAvwoAAAAAAAAAAAAAgD8KAACAvwAAAAAAAAAACss7hkXC4TFBSGH2wQoI9oRFwuExQUhh9sEKCPaERcLhMUGwR4/AcAEAAQACAwEBAQACBAUCCwAGBwgJCgsMDQ4P'
..'EBESExQVFhMXGBkJAQIBAAIEBQQMAAYHCAkKGgwbDhwQHRITFB4WExcfGQkgISIFAgAMIxQkJQYBAA4mIgUCAAwnFCglCAEADiYiBQIADCkUKiUKAQAOJgUECwAGBwgJCgsMKw4PEBESExQsFhMXLRkJBQQLAAYHCAkKCwwuDg8QERITFC8WExcYGQkFBAsABgcICQoL'
..'DDAODxAREjEUMhYxFy0ZCTMECgAGBwgJCgsMNA41EBESNhQ3FjYXOAUECwAGBwgJCgsMOQ4PEBESExQ6FhMXOxkJMwQKAAYHCAkKCww8DjUQERI9FD4WPxdABQQLAAYHCAkKCwxBDg8QERITFEIWExc7GQkFBAsABgcICQpDDEQORRBGEhMURxYTF0gZCQEBAQACSQUU'
..'CwAGBwgJCgsMSg4PEBESExRLFhMXGBkJARQBAAJJBRYMAAYHCAkKGgxMDhwQHRITFE0WExcfGQkgISIXAgAMIxQkJRgBAA4mIhcCAAwnFCglGgEADiYiFwIADCkUKiUcAQAOJgUWCwAGBwgJCgsMTg4PEBESExRPFhMXLRkJBRYLAAYHCAkKCwxQDg8QERITFFEWExcY'
..'GQkFFgsABgcICQoLDFIODxAREjEUUxYxFy0ZCTMWCgAGBwgJCgsMVA41EBESNhRVFjYXOAUWCwAGBwgJCgsMVg4PEBESExRXFhMXOxkJMxYKAAYHCAkKCwxYDjUQERI9FFkWPxdABRYLAAYHCAkKCwxaDg8QERITFFsWExc7GQkFFgsABgcICQpDDFwORRBGEhMUXRYT'
..'F0gZCQUBCwAGBwgJCkMMXg5FEEYSExRfFhMXSBkJMwEKAAYHCAkKCwxgDjUQERI9FGEWPxdABQELAAYHCAkKCwxiDg8QERITFGMWExcYGQkFAQsABgcICQoLDGQODxAREhMUZRYTFzsZCQUBCwAGBwgJCgsMZg4PEBESExRnFhMXLRkJBQELAAYHCAkKCwxoDg8QERIT'
..'FGkWExc7GQkFAQwABgcICQoaDGoOHBAdEhMUaxYTFx8ZCSAhIiwCAAwjFCQlLQEADiYiLAIADCcUKCUvAQAOJiIsAgAMKRQqJTEBAA4mBQELAAYHCAkKCwxsDg8QERITFG0WExcYGQkFAQsABgcICQoLDG4ODxAREhMUbxYTFy0ZCTMBCgAGBwgJCgsMcA41EBESNhRx'
..'FjYXODMBCgAGBwgJCgsMcg41EBEScxR0FnUXQAUBCwAGBwgJCgsMdg4PEBESMRR3FjEXOxkJBQELAAYHCAkKCwx4Dg8QERITFHkWExctGQkFAQwABgcICQoaDHoOHBAdEjEUexYxFx8ZCSAhIjkCAAwjFCQlOgEADiYiOQIADCcUKCU8AQAOJiI5AgAMKRQqJT4BAA4m'
..'BQELAAYHCAkKCwx8Dg8QERIxFH0WMRc7GQkFAQsABgcICQoLDH4ODxAREjEUfxYxFxgZCQUBCwAGBwgJCgsMgA4PEBESMRSBFjEXGBkJBQELAAYHCAkKCwyCDg8QERIxFIMWMRctGQkzAQoABgcICQoLDIQONRAREoUUhhaHFzgFAQsABgcICQpDDIgORRBGEjEUiRYx'
..'F0gZCQEBAQACigVGCwAGBwgJCgsMiw4PEBESMRSMFjEXGBkJAUYBAAKKBUgMAAYHCAkKGgyNDhwQHRIxFI4WMRcfGQkgISJJAgAMIxQkJUoBAA4mIkkCAAwnFCglTAEADiYiSQIADCkUKiVOAQAOJgVICwAGBwgJCgsMjw4PEBESMRSQFjEXLRkJBUgLAAYHCAkKCwyR'
..'Dg8QERIxFJIWMRcYGQkFSAsABgcICQoLDJMODxAREhMUlBYTFy0ZCTNICgAGBwgJCgsMlQ41EBEShRSWFocXOAVICwAGBwgJCgsMlw4PEBESMRSYFjEXOxkJM0gKAAYHCAkKCwyZDjUQERJzFJoWdRdABUgLAAYHCAkKCwybDg8QERIxFJwWMRc7GQkFSAsABgcICQpD'
..'DJ0ORRBGEjEUnhYxF0gZCQEBAQACnwVYCwAGBwgJCgsMoA4PEBESMRShFjEXGBkJAVgBAAKfBVoMAAYHCAkKGgyiDhwQHRIxFKMWMRcfGQkgISJbAgAMIxQkJVwBAA4mIlsCAAwnFCglXgEADiYiWwIADCkUKiVgAQAOJgVaCwAGBwgJCgsMpA4PEBESMRSlFjEXLRkJ'
..'BVoLAAYHCAkKCwymDg8QERIxFKcWMRcYGQkFWgsABgcICQoLDKgODxAREhMUqRYTFy0ZCTNaCgAGBwgJCgsMqg41EBEShRSrFocXOAVaCwAGBwgJCgsMrA4PEBESMRStFjEXOxkJM1oKAAYHCAkKCwyuDjUQERJzFK8WdRdABVoLAAYHCAkKCwywDg8QERIxFLEWMRc7'
..'GQkFWgsABgcICQpDDLIORRBGEjEUsxYxF0gZCQUBCQAGBwgJCgsMtA4PEBEUtRe2GQkFAQkABgcICQoLDLcODxARFLgXuRkJBQEJAAYHCAkKCwy6Dg8QERS7F7kZCQUBCQAGBwgJCgsMvA4PEBEUvRe2GQkzAQoABgcICQoLDL4ONRAREr8UwBbBF8IzAQoABgcICQoL'
..'DMMONRAREj8UxBbFF8IzAQoABgcICQrGDMcOyBAREskUyhbJF8sA')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end
